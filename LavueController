#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        LavueController.py
#
#  Project :     Lavue Controller
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      jan.kotanski$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["LavueController", "LavueControllerClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(LavueController.additionnal_import) ENABLED START -----#
import json
#----- PROTECTED REGION END -----#	//	LavueController.additionnal_import

# Device States Description
# ON : 
# OFF : 


class LavueController (PyTango.Device_4Impl):
    """tango server to change lavue setting in real time"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(LavueController.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LavueController.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        LavueController.init_device(self)
        #----- PROTECTED REGION ID(LavueController.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LavueController.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(LavueController.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LavueController.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_BeamCenterX_read = 0.0
        self.attr_BeamCenterY_read = 0.0
        self.attr_DetectorDistance_read = 0.0
        self.attr_DetectorROIs_read = ""
        self.attr_DetectorROIsValues_read = ""
        self.attr_Energy_read = 0.0
        self.set_change_event("BeamCenterX", True, False)
        self.set_change_event("BeamCenterY", True, False)
        self.set_change_event("DetectorDistance", True, False)
        self.set_change_event("DetectorROIs", True, False)
        self.set_change_event("Energy", True, False)
        #----- PROTECTED REGION ID(LavueController.init_device) ENABLED START -----#
        self.attr_DetectorROIs_read = "{}"
        self.attr_DetectorROIsValues_read = "{}"

        self.requested_scalar_aliases = []
        self.requested_spectrum_aliases = []
        self.current_scalar_aliases = []
        self.current_spectrum_aliases = []
        #----- PROTECTED REGION END -----#	//	LavueController.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(LavueController.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LavueController.always_executed_hook

    # -------------------------------------------------------------------------
    #    LavueController read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_BeamCenterX(self, attr):
        self.debug_stream("In read_BeamCenterX()")
        #----- PROTECTED REGION ID(LavueController.BeamCenterX_read) ENABLED START -----#
        attr.set_value(self.attr_BeamCenterX_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.BeamCenterX_read
        
    def write_BeamCenterX(self, attr):
        self.debug_stream("In write_BeamCenterX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LavueController.BeamCenterX_write) ENABLED START -----#
        if self.attr_BeamCenterX_read != float(data):
            self.attr_BeamCenterX_read = float(data)
            self.push_change_event("BeamCenterX", self.attr_BeamCenterX_read)
        #----- PROTECTED REGION END -----#	//	LavueController.BeamCenterX_write
        
    def read_BeamCenterY(self, attr):
        self.debug_stream("In read_BeamCenterY()")
        #----- PROTECTED REGION ID(LavueController.BeamCenterY_read) ENABLED START -----#
        attr.set_value(self.attr_BeamCenterY_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.BeamCenterY_read
        
    def write_BeamCenterY(self, attr):
        self.debug_stream("In write_BeamCenterY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LavueController.BeamCenterY_write) ENABLED START -----#
        if self.attr_BeamCenterY_read != float(data):
            self.attr_BeamCenterY_read = float(data)
            self.push_change_event("BeamCenterY", self.attr_BeamCenterY_read)
        #----- PROTECTED REGION END -----#	//	LavueController.BeamCenterY_write
        
    def read_DetectorDistance(self, attr):
        self.debug_stream("In read_DetectorDistance()")
        #----- PROTECTED REGION ID(LavueController.DetectorDistance_read) ENABLED START -----#
        attr.set_value(self.attr_DetectorDistance_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.DetectorDistance_read
        
    def write_DetectorDistance(self, attr):
        self.debug_stream("In write_DetectorDistance()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LavueController.DetectorDistance_write) ENABLED START -----#
        if self.attr_DetectorDistance_read != float(data):
            self.attr_DetectorDistance_read = float(data)
            self.push_change_event(
                "DetectorDistance", self.attr_DetectorDistance_read)
        #----- PROTECTED REGION END -----#	//	LavueController.DetectorDistance_write
        
    def read_DetectorROIs(self, attr):
        self.debug_stream("In read_DetectorROIs()")
        #----- PROTECTED REGION ID(LavueController.DetectorROIs_read) ENABLED START -----#
        attr.set_value(self.attr_DetectorROIs_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.DetectorROIs_read
        
    def write_DetectorROIs(self, attr):
        self.debug_stream("In write_DetectorROIs()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LavueController.DetectorROIs_write) ENABLED START -----#
        detrois = json.loads(data)
        for det, rois in detrois.items():
            if not isinstance(det, (str, unicode)):
                raise Exception(
                    "ROI name %s is not string" % str(det))
            if not isinstance(rois, (list)):
                raise Exception(
                    "ROI %s is not a double list" % str(det))
            for roi in rois:
                if not isinstance(roi, (list)):
                    raise Exception(
                        "ROI %s is not a double list" % str(det))
                if len(roi) != 4:
                    raise Exception(
                        "ROI %s len is not 4" % str(det))
                for cr in roi:
                    float(cr)

        if self.attr_DetectorROIs_read != data:
            self.attr_DetectorROIs_read = data
            self.push_change_event("DetectorROIs", self.attr_DetectorROIs_read)
        #----- PROTECTED REGION END -----#	//	LavueController.DetectorROIs_write
        
    def read_DetectorROIsValues(self, attr):
        self.debug_stream("In read_DetectorROIsValues()")
        #----- PROTECTED REGION ID(LavueController.DetectorROIsValues_read) ENABLED START -----#
        attr.set_value(self.attr_DetectorROIsValues_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.DetectorROIsValues_read
        
    def write_DetectorROIsValues(self, attr):
        self.debug_stream("In write_DetectorROIsValues()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LavueController.DetectorROIsValues_write) ENABLED START -----#
        detrois = json.loads(data)
        for det, rois in detrois.items():
                
            if not isinstance(det, (str, unicode)):
                raise Exception(
                    "ROI name %s is not string" % str(det))
            if not isinstance(rois, (list)):
                raise Exception(
                    "ROI %s is not a double list" % str(det))
            for vroi in rois:
                if vroi is not None:
                    float(vroi)

        if self.DynamicROIs:
            self.requested_scalar_aliases = []
            self.requested_spectrum_aliases = []
            for det, rois in detrois.items():
                if len(rois) == 1:
                    self.requested_scalar_aliases.append(det.title())
                elif  len(rois) > 1:
                    self.requested_spectrum_aliases.append(det.title())

        if self.attr_DetectorROIsValues_read != data:
            self.attr_DetectorROIsValues_read = data
            if self.DynamicROIs:
                self.initialize_dynamic_attributes()
            self.push_change_event("DetectorROIsValues", self.attr_DetectorROIsValues_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.DetectorROIsValues_write
        
    def read_Energy(self, attr):
        self.debug_stream("In read_Energy()")
        #----- PROTECTED REGION ID(LavueController.Energy_read) ENABLED START -----#
        attr.set_value(self.attr_Energy_read)
        
        #----- PROTECTED REGION END -----#	//	LavueController.Energy_read
        
    def write_Energy(self, attr):
        self.debug_stream("In write_Energy()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LavueController.Energy_write) ENABLED START -----#
        if self.attr_Energy_read != float(data):
            self.attr_Energy_read = float(data)
            self.push_change_event("Energy", self.attr_Energy_read)
        #----- PROTECTED REGION END -----#	//	LavueController.Energy_write
        
    
    def read_ScalarDynamicAttr(self, attr):
        self.debug_stream("In read_ScalarDynamicAttr()")
        #----- PROTECTED REGION ID(LavueController.ScalarDynamicAttr_read) ENABLED START -----#
        name = attr.get_name()[:-3]
        if not name:
            name = "__null__"
        detrois = json.loads(self.attr_DetectorROIsValues_read)
        if name in detrois.keys() and detrois[name]:
            attr.set_value(detrois[name][0])
        else:
            name = ("%s%s" % (name[0].lower(), name[1:]))
            if name in detrois.keys() and detrois[name]:
                attr.set_value(detrois[name][0])
            else:
                attr.set_value(-1)
        #----- PROTECTED REGION END -----#	//	LavueController.ScalarDynamicAttr_read
        
    def read_SpectrumDynamicAttr(self, attr):
        self.debug_stream("In read_SpectrumDynamicAttr()")
        #----- PROTECTED REGION ID(LavueController.SpectrumDynamicAttr_read) ENABLED START -----#
        
        name = attr.get_name()[:-4]
        if not name:
            name = "__null__"
        detrois = json.loads(self.attr_DetectorROIsValues_read)
        if name in detrois.keys():
            attr.set_value(detrois[name])
        else:
            name = ("%s%s" % (name[0].lower(), name[1:]))
            if name in detrois.keys():
                attr.set_value(detrois[name])
            else:
                attr.set_value([])
        #----- PROTECTED REGION END -----#	//	LavueController.SpectrumDynamicAttr_read
        
    
    def initialize_dynamic_attributes(self):
        self.debug_stream("In initialize_dynamic_attributes()")
        
        #   Example to add dynamic attributes
        #   Copy inside the folowing protected area to instanciate at startup.
        
        """   For Attribute ScalarDynamicAttr
        myScalarDynamicAttr = PyTango.Attr('MyScalarDynamicAttr', PyTango.DevDouble, PyTango.READ)
        self.add_attribute(myScalarDynamicAttr,LavueController.read_ScalarDynamicAttr, None, None)
        self.attr_ScalarDynamicAttr_read = 0.0
        """
        
        """   For Attribute SpectrumDynamicAttr
        mySpectrumDynamicAttr = PyTango.SpectrumAttr('MySpectrumDynamicAttr', PyTango.DevDouble, PyTango.READ, 4096)
        self.add_attribute(mySpectrumDynamicAttr,LavueController.read_SpectrumDynamicAttr, None, None)
        self.attr_SpectrumDynamicAttr_read = [0.0]
        """
        
        #----- PROTECTED REGION ID(LavueController.initialize_dynamic_attributes) ENABLED START -----#
        if self.current_scalar_aliases != self.requested_scalar_aliases or \
           self.current_spectrum_aliases != self.requested_spectrum_aliases:
            for alias in self.current_scalar_aliases:
                if alias not in self.requested_scalar_aliases:
                    self.remove_attribute(str("%sSum" % alias)
                                          if alias != "__Null__" else "Sum")
            for alias in self.current_spectrum_aliases:
                if alias not in self.requested_spectrum_aliases:
                    self.remove_attribute(str("%sSums" % alias)
                                          if alias != "__Null__" else "Sums")

            for alias in self.requested_scalar_aliases:
                if alias not in self.current_scalar_aliases:
                    myAttr = PyTango.Attr(
                        str("%sSum" % alias) if alias != "__Null__" else "Sum",
                        PyTango.DevDouble, PyTango.READ)
                    self.add_attribute(myAttr, LavueController.read_ScalarDynamicAttr,
                                       None, None)
            for alias in self.requested_spectrum_aliases:
                if alias not in self.current_spectrum_aliases:
                    myAttr = PyTango.SpectrumAttr(
                        str("%sSums" % alias) if alias != "__Null__" else "Sums",
                        PyTango.DevDouble,
                        PyTango.AttrWriteType.READ, 4096)
                    self.add_attribute(myAttr, LavueController.read_SpectrumDynamicAttr,
                                       None, None)
            self.current_scalar_aliases = self.requested_scalar_aliases
            self.current_spectrum_aliases = self.requested_spectrum_aliases
        #----- PROTECTED REGION END -----#	//	LavueController.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(LavueController.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LavueController.read_attr_hardware


    # -------------------------------------------------------------------------
    #    LavueController command methods
    # -------------------------------------------------------------------------
    
    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(LavueController.State) ENABLED START -----#
        argout = PyTango.DevState.ON
        return argout
        #----- PROTECTED REGION END -----#	//	LavueController.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()
        
    def dev_status(self):
        """ This command gets the device status (stored in its device_status data member) and returns it to the caller.
        :return: Device status
        :rtype: PyTango.ConstDevString
        """
        self.debug_stream("In dev_status()")
        argout = ""
        #----- PROTECTED REGION ID(LavueController.Status) ENABLED START -----#
        self.argout = "State is ON"
        
        #----- PROTECTED REGION END -----#	//	LavueController.Status
        self.set_status(self.argout)
        self.__status = PyTango.Device_4Impl.dev_status(self)
        return self.__status
        

    #----- PROTECTED REGION ID(LavueController.programmer_methods) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	LavueController.programmer_methods

class LavueControllerClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(LavueController.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LavueController.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`LavueController.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(LavueController.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LavueController.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'DynamicROIs':
            [PyTango.DevBoolean, 
            "create dynamically Attributes for ROIs aliases with their sums",
            [True]],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'BeamCenterX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "beam center x",
                'unit': "pixels",
                'abs_change': "0.0001",
                'Memorized':"true"
            } ],
        'BeamCenterY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "beam center y",
                'unit': "pixels",
                'abs_change': "0.0001",
                'Memorized':"true"
            } ],
        'DetectorDistance':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "detector distance",
                'unit': "mm",
                'abs_change': "0.0001",
                'Memorized':"true"
            } ],
        'DetectorROIs':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "detector ROIs",
                'description': "json dictionary with detector ROIs, e.g.  {`pilatusroi1`: [[26, 15, 232, 65]], `lambdarois`: [[54, 78, 102, 204], [10, 20, 40, 50]]}",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'DetectorROIsValues':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "detector ROIs values",
                'description': "json dictionary with detector ROIs values, e.g.  {'pilatusroi1': [26.3], 'lambdarois': [54.3, 434.30]]}",
                'Memorized':"true"
            } ],
        'Energy':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "beam energy",
                'unit': "eV",
                'abs_change': "0.0001",
                'Memorized':"true"
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(LavueControllerClass, LavueController, 'LavueController')
        #----- PROTECTED REGION ID(LavueController.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LavueController.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
